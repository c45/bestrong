trigger: 
  branches:
    include:
      - master
  paths:
    include:
      - dev/*  
pr: none

stages:
  - stage: CI
    pool: 
      vmImage: ubuntu-latest
    jobs:
      - job: Test
        displayName: Run Tests
        steps:
        - task: TerraformInstaller@0
          displayName: Install Terraform
          inputs:
            terraformVersion: 'v1.5.2'

        - checkout: self
          displayName: Checkout Repository  

        - task: TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(TF_ROOT)'
            backendType: 'azurerm'
            backendServiceArm: 'PipelineConnection'
            backendAzureRmSubscriptionId: $(SUBSCRIPTION_ID)

        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            workingDirectory: '$(TF_ROOT)'

        - task: TerraformCLI@0
          displayName: Terraform Plan
          inputs:
            command: 'plan'
            workingDirectory: '$(TF_ROOT)'
            environmentServiceName: 'PipelineConnection'
            providerAzureRmSubscriptionId: $(SUBSCRIPTION_ID)
            publishPlanResults: 'tfplan'

  - stage: CD
    pool: 
      vmImage: ubuntu-latest
    jobs:
      - job: Deploy
        steps:
        - task: TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(TF_ROOT)'
            backendType: 'azurerm'
            backendServiceArm: 'PipelineConnection'
            backendAzureRmSubscriptionId: $(SUBSCRIPTION_ID)

        - task: TerraformCLI@0
          displayName: Terraform Apply
          inputs:
            command: 'apply'
            workingDirectory: '$(TF_ROOT)'
            environmentServiceName: 'PipelineConnection'
            providerAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'

  - stage: Clean_Up
    displayName: Clean Up
    jobs:
      - job: Approve
        pool: server
        steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: 'Delete all cloud resources?'
            onTimeout: 'resume'

      - job: Destroy
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(TF_ROOT)'
            backendType: 'azurerm'
            backendServiceArm: 'PipelineConnection'
            backendAzureRmSubscriptionId: $(SUBSCRIPTION_ID) 

        - task: TerraformCLI@0
          displayName: Terraform Destroy
          inputs:
            command: 'destroy'
            workingDirectory: '$(TF_ROOT)'
            environmentServiceName: 'PipelineConnection'
            providerAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'



    